yeh rahi app.js
const express = require('express');
const { connectToDB } = require('./connection');
const shortURL = require('./routes/shortURL');
const logRequest = require('./middlewares/logRequest');

const app = express();
const PORT = 3000;

// Handling Middlewares
app.use(express.json());
app.use(logRequest('log.txt'));

// Connection to DB
const dbName = 'Github'
const dbURL = `mongodb://127.0.0.1:27017/${dbName}`;
connectToDB(dbURL)
    .then(() => console.log(`connected to ${dbURL}`))
    .catch((err) => console.log(err));

// routes
app.use('/', shortURL);

// Listening at PORT
app.listen(PORT, () => console.log(`Listening on port ${PORT}`));






yeh raha connection.js
const mongoose = require('mongoose');

function connectToDB(url)
{
    return mongoose.connect(url);
}

module.exports = { connectToDB };









yeh rah routes/shortURL.js
const express = require('express');
const Router = express.Router();
const { createShortURL, redirectURL, getAnalytics } = require('../controllers/shortURL');

// handling POST request
Router.post('/', createShortURL);
Router.get('/:id', redirectURL);
Router.get('/analytics/:id', getAnalytics);

module.exports = Router;









yeh raha models/shortURLModel.js
const mongoose = require('mongoose');

const urlSchema = mongoose.Schema({
    id : {
        type : String,
        unique : true,
        required : true,
    },

    redirectURL : {
        type : String,
        required : true,
    },

    history : [{ time : {type : Date} }]
});

const urlModel = mongoose.model('shortURL', urlSchema);

module.exports = urlModel;










yeh raha middlewares/logRequest.js
// custom middleware to log requests

const fs = require('fs');
function logRequest(fileName)
{
    return (request, response, next) => 
    {
        fs.appendFile(fileName, `${request.ip} -> ${new Date()} -> ${request.method} -> ${request.url} -> ${JSON.stringify(request.params)} -> ${JSON.stringify(request.body)} \n`, (err) => 
        {
            if(err)
                console.log(err);
        });
        next();
    }
}

module.exports = logRequest;













yeh raha controllers/shortURL.js
const urlModel = require('../models/shortURLModel');
const nanoid = require('nanoid');
const validURI = require('valid-url');

async function redirectURL(request, response)
{
    try
    {
        let id = request.params.id;
        let res = await urlModel.findOne({'id' : id});
        if(res)
        {
            await urlModel.findOneAndUpdate({'id' : id}, {$push : {history : {'time' : new Date()}}});
            return response.redirect(res.redirectURL);
        }
        
        return response.status(400).json({"error" : "InvalidID", "message" : `ID:${id} is Invalid`});
    }
    catch(error)
    {
        console.log(error);
        response.sendStatus(500);
    }
}

async function createShortURL(request, response)
{
    try
    {
        let url = request.body.redirectURL;
        if(url)
        {
            let id = nanoid.nanoid(6);
            await urlModel.create({...request.body, "id" : id});
            return response.status(201).json({'id' : id});
        }

        return response.status(400).json({"error" : "InvalidURL", "message" : `Please enter a valid redirectURL in json format`});
    }
    catch(error)
    {
        console.log(error);
        response.sendStatus(500);
    }
}

async function getAnalytics(request, response)
{
    try
    {
        let id = request.params.id;
        let res = await urlModel.findOne({"id" : id});
        if(res)
            return response.status(200).json({'totalClicks' : res.history.length, 'history' : res.history});

        return response.status(400).json({"error" : "InvalidID", "message" : `ID:${id} is Invalid`});
    }
    catch(error)
    {
        console.log(error);
        response.sendStatus(500);
    }
}

module.exports = { createShortURL, redirectURL, getAnalytics };